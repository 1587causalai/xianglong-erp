{"ast":null,"code":"export default {\n  name: 'PurchaseOrderDetail',\n  data() {\n    return {\n      order: {\n        items: []\n      }\n    };\n  },\n  created() {\n    const orderId = this.$route.params.id;\n    if (orderId) {\n      this.fetchOrderDetails(orderId);\n    }\n  },\n  methods: {\n    fetchOrderDetails(orderId) {\n      // TODO: API call\n      console.log('Fetching purchase order details for:', orderId);\n      this.order = {\n        purchase_order_id: orderId,\n        order_no: 'PO2023001',\n        supplier_name: '供应商A',\n        supplier_id: '1',\n        order_date: '2023-01-05',\n        expected_date: '2023-01-20',\n        order_status: 3,\n        total_amount: 2000,\n        order_remark: '常规采购',\n        items: [{\n          order_item_id: 1,\n          component_id: '1',\n          component_name: '示例配件X',\n          component_code: 'C001',\n          quantity: 200,\n          unit_price: 10,\n          received_quantity: 200\n        }]\n      };\n    },\n    getStatusText(status) {\n      const statusMap = {\n        0: '草稿',\n        1: '已发送',\n        2: '部分到货',\n        3: '全部到货',\n        4: '完成',\n        5: '取消'\n      };\n      return statusMap[status] || '未知';\n    },\n    goBack() {\n      this.$router.push({\n        name: 'PurchaseOrderList'\n      });\n    }\n  },\n  filters: {\n    toFixed(value, count) {\n      if (isNaN(parseFloat(value))) return '0.00';\n      return parseFloat(value).toFixed(count || 2);\n    }\n  }\n};","map":{"version":3,"names":["name","data","order","items","created","orderId","$route","params","id","fetchOrderDetails","methods","console","log","purchase_order_id","order_no","supplier_name","supplier_id","order_date","expected_date","order_status","total_amount","order_remark","order_item_id","component_id","component_name","component_code","quantity","unit_price","received_quantity","getStatusText","status","statusMap","goBack","$router","push","filters","toFixed","value","count","isNaN","parseFloat"],"sources":["src/views/purchase/PurchaseOrderDetail.vue"],"sourcesContent":["<template>\n  <div class=\"purchase-order-detail-container\">\n    <h2>采购订单详情 - {{ order.order_no }}</h2>\n    <el-descriptions :column=\"2\" border>\n      <el-descriptions-item label=\"供应商名称\">{{ order.supplier_name }}</el-descriptions-item>\n      <el-descriptions-item label=\"订单日期\">{{ order.order_date }}</el-descriptions-item>\n      <el-descriptions-item label=\"预计到货日\">{{ order.expected_date }}</el-descriptions-item>\n      <el-descriptions-item label=\"订单状态\">\n        <el-tag>{{ getStatusText(order.order_status) }}</el-tag>\n      </el-descriptions-item>\n      <el-descriptions-item label=\"总金额\">{{ order.total_amount | toFixed(2) }}</el-descriptions-item>\n      <el-descriptions-item label=\"备注\">{{ order.order_remark }}</el-descriptions-item>\n    </el-descriptions>\n\n    <h3>订单明细 (配件)</h3>\n    <el-table :data=\"order.items\" border style=\"width: 100%; margin-top:15px;\">\n      <el-table-column prop=\"component_name\" label=\"配件名称\"></el-table-column>\n      <el-table-column prop=\"component_code\" label=\"配件编码\"></el-table-column>\n      <el-table-column prop=\"quantity\" label=\"订单数量\"></el-table-column>\n      <el-table-column prop=\"unit_price\" label=\"单价\"></el-table-column>\n      <el-table-column prop=\"line_amount\" label=\"金额\">\n        <template slot-scope=\"scope\">\n          {{ (scope.row.quantity * scope.row.unit_price) | toFixed(2) }}\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"received_quantity\" label=\"已收货数量\"></el-table-column>\n    </el-table>\n\n    <!-- TODO: Add sections for related receipts, invoices based on README -->\n    <div style=\"margin-top: 20px;\">\n        <el-button @click=\"goBack\">返回列表</el-button>\n        <!-- Add other actions like print, create receipt etc. -->\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'PurchaseOrderDetail',\n  data() {\n    return {\n      order: {\n        items: []\n      }\n    };\n  },\n  created() {\n    const orderId = this.$route.params.id;\n    if (orderId) {\n      this.fetchOrderDetails(orderId);\n    }\n  },\n  methods: {\n    fetchOrderDetails(orderId) {\n      // TODO: API call\n      console.log('Fetching purchase order details for:', orderId);\n      this.order = {\n        purchase_order_id: orderId,\n        order_no: 'PO2023001',\n        supplier_name: '供应商A',\n        supplier_id: '1',\n        order_date: '2023-01-05',\n        expected_date: '2023-01-20',\n        order_status: 3,\n        total_amount: 2000,\n        order_remark: '常规采购',\n        items: [\n          { order_item_id: 1, component_id: '1', component_name: '示例配件X', component_code: 'C001', quantity: 200, unit_price: 10, received_quantity: 200 },\n        ]\n      };\n    },\n    getStatusText(status) {\n      const statusMap = { 0: '草稿', 1: '已发送', 2: '部分到货', 3: '全部到货', 4: '完成', 5: '取消' };\n      return statusMap[status] || '未知';\n    },\n    goBack() {\n      this.$router.push({ name: 'PurchaseOrderList' });\n    }\n  },\n  filters: {\n    toFixed(value, count) {\n        if (isNaN(parseFloat(value))) return '0.00';\n        return parseFloat(value).toFixed(count || 2);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.purchase-order-detail-container {\n  padding: 20px;\n}\n.el-descriptions {\n    margin-top: 15px;\n}\n</style> "],"mappings":"AAqCA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;QACAC,KAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,MAAAC,OAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;IACA,IAAAH,OAAA;MACA,KAAAI,iBAAA,CAAAJ,OAAA;IACA;EACA;EACAK,OAAA;IACAD,kBAAAJ,OAAA;MACA;MACAM,OAAA,CAAAC,GAAA,yCAAAP,OAAA;MACA,KAAAH,KAAA;QACAW,iBAAA,EAAAR,OAAA;QACAS,QAAA;QACAC,aAAA;QACAC,WAAA;QACAC,UAAA;QACAC,aAAA;QACAC,YAAA;QACAC,YAAA;QACAC,YAAA;QACAlB,KAAA,GACA;UAAAmB,aAAA;UAAAC,YAAA;UAAAC,cAAA;UAAAC,cAAA;UAAAC,QAAA;UAAAC,UAAA;UAAAC,iBAAA;QAAA;MAEA;IACA;IACAC,cAAAC,MAAA;MACA,MAAAC,SAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;MACA,OAAAA,SAAA,CAAAD,MAAA;IACA;IACAE,OAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;QAAAlC,IAAA;MAAA;IACA;EACA;EACAmC,OAAA;IACAC,QAAAC,KAAA,EAAAC,KAAA;MACA,IAAAC,KAAA,CAAAC,UAAA,CAAAH,KAAA;MACA,OAAAG,UAAA,CAAAH,KAAA,EAAAD,OAAA,CAAAE,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}