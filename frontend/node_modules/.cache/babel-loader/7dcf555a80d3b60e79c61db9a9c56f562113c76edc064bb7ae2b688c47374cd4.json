{"ast":null,"code":"export default {\n  name: 'SalesOrderForm',\n  data() {\n    return {\n      isEditMode: false,\n      orderForm: {\n        order_no: '',\n        customer_id: null,\n        order_date: new Date(),\n        delivery_date: null,\n        order_status: 0,\n        // Draft by default\n        total_amount: 0,\n        order_remark: '',\n        items: []\n      }\n    };\n  },\n  computed: {\n    totalAmountDisplay() {\n      return this.orderForm.items.reduce((sum, item) => sum + (item.quantity * item.unit_price || 0), 0).toFixed(2);\n    }\n  },\n  created() {\n    const orderId = this.$route.params.id;\n    if (orderId && orderId !== 'new') {\n      this.isEditMode = true;\n      this.fetchOrderDetails(orderId);\n    } else {\n      this.addItem(); // Add one item line by default for new order\n    }\n  },\n  methods: {\n    fetchOrderDetails(orderId) {\n      // TODO: API call\n      console.log('Fetching sales order:', orderId);\n      this.orderForm = {\n        sales_order_id: orderId,\n        order_no: 'SO2023001',\n        customer_id: '1',\n        order_date: '2023-01-10',\n        delivery_date: '2023-02-01',\n        order_status: 1,\n        total_amount: 5000,\n        order_remark: '加急订单',\n        items: [{\n          order_item_id: 1,\n          product_id: '1',\n          quantity: 50,\n          unit_price: 100\n        }]\n      };\n    },\n    addItem() {\n      this.orderForm.items.push({\n        product_id: null,\n        quantity: 1,\n        unit_price: 0\n      });\n    },\n    removeItem(index) {\n      this.orderForm.items.splice(index, 1);\n    },\n    submitForm() {\n      // TODO: Validate and API call\n      this.orderForm.total_amount = parseFloat(this.totalAmountDisplay);\n      console.log('Submitting sales order:', this.orderForm);\n      this.$message.success('订单保存成功!');\n      this.goBack();\n    },\n    goBack() {\n      this.$router.push({\n        name: 'SalesOrderList'\n      });\n    }\n  },\n  filters: {\n    toFixed(value, count) {\n      if (isNaN(parseFloat(value))) return '0.00';\n      return parseFloat(value).toFixed(count || 2);\n    }\n  }\n};","map":{"version":3,"names":["name","data","isEditMode","orderForm","order_no","customer_id","order_date","Date","delivery_date","order_status","total_amount","order_remark","items","computed","totalAmountDisplay","reduce","sum","item","quantity","unit_price","toFixed","created","orderId","$route","params","id","fetchOrderDetails","addItem","methods","console","log","sales_order_id","order_item_id","product_id","push","removeItem","index","splice","submitForm","parseFloat","$message","success","goBack","$router","filters","value","count","isNaN"],"sources":["src/views/sales/SalesOrderForm.vue"],"sourcesContent":["<template>\n  <div class=\"sales-order-form-container\">\n    <h2>{{ isEditMode ? '编辑销售订单' : '新增销售订单' }}</h2>\n    <el-form :model=\"orderForm\" ref=\"orderFormRef\" label-width=\"100px\">\n      <el-form-item label=\"订单编号\" prop=\"order_no\">\n        <el-input v-model=\"orderForm.order_no\" :disabled=\"isEditMode\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"客户\" prop=\"customer_id\">\n        <!-- TODO: Searchable select for customers -->\n        <el-select v-model=\"orderForm.customer_id\" placeholder=\"选择客户\">\n          <el-option label=\"客户甲\" value=\"1\"></el-option>\n          <el-option label=\"客户乙\" value=\"2\"></el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"订单日期\" prop=\"order_date\">\n        <el-date-picker v-model=\"orderForm.order_date\" type=\"date\" placeholder=\"选择日期\"></el-date-picker>\n      </el-form-item>\n      <el-form-item label=\"交付日期\" prop=\"delivery_date\">\n        <el-date-picker v-model=\"orderForm.delivery_date\" type=\"date\" placeholder=\"选择日期\"></el-date-picker>\n      </el-form-item>\n      \n      <h3>订单明细</h3>\n      <el-table :data=\"orderForm.items\" border style=\"margin-bottom:15px;\">\n        <el-table-column label=\"产品\">\n            <template slot-scope=\"scope\">\n                <!-- TODO: Searchable select for products -->\n                <el-select v-model=\"scope.row.product_id\" placeholder=\"选择产品\">\n                    <el-option label=\"示例产品A\" value=\"1\"></el-option>\n                    <el-option label=\"示例产品B\" value=\"2\"></el-option>\n                </el-select>\n            </template>\n        </el-table-column>\n        <el-table-column label=\"数量\">\n            <template slot-scope=\"scope\">\n                <el-input-number v-model=\"scope.row.quantity\" :min=\"1\"></el-input-number>\n            </template>\n        </el-table-column>\n        <el-table-column label=\"单价\">\n            <template slot-scope=\"scope\">\n                 <!-- TODO: Auto-fetch price or allow manual input -->\n                <el-input-number v-model=\"scope.row.unit_price\" :min=\"0\" :precision=\"2\"></el-input-number>\n            </template>\n        </el-table-column>\n        <el-table-column label=\"金额\">\n            <template slot-scope=\"scope\">\n                {{ (scope.row.quantity * scope.row.unit_price) || 0 | toFixed(2) }}\n            </template>\n        </el-table-column>\n        <el-table-column label=\"操作\">\n            <template slot-scope=\"scope\">\n                <el-button size=\"mini\" type=\"danger\" @click=\"removeItem(scope.$index)\">移除</el-button>\n            </template>\n        </el-table-column>\n      </el-table>\n      <el-button @click=\"addItem\">添加产品</el-button>\n      \n      <el-form-item label=\"总金额\" style=\"margin-top:15px;\">\n          <el-input v-model=\"totalAmountDisplay\" readonly></el-input>\n      </el-form-item>\n\n      <el-form-item label=\"备注\" prop=\"order_remark\">\n        <el-input type=\"textarea\" v-model=\"orderForm.order_remark\"></el-input>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"submitForm\">保存</el-button>\n        <el-button @click=\"goBack\">取消</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'SalesOrderForm',\n  data() {\n    return {\n      isEditMode: false,\n      orderForm: {\n        order_no: '',\n        customer_id: null,\n        order_date: new Date(),\n        delivery_date: null,\n        order_status: 0, // Draft by default\n        total_amount: 0,\n        order_remark: '',\n        items: []\n      }\n    };\n  },\n  computed: {\n    totalAmountDisplay() {\n      return this.orderForm.items.reduce((sum, item) => sum + (item.quantity * item.unit_price || 0), 0).toFixed(2);\n    }\n  },\n  created() {\n    const orderId = this.$route.params.id;\n    if (orderId && orderId !== 'new') {\n      this.isEditMode = true;\n      this.fetchOrderDetails(orderId);\n    } else {\n        this.addItem(); // Add one item line by default for new order\n    }\n  },\n  methods: {\n    fetchOrderDetails(orderId) {\n      // TODO: API call\n      console.log('Fetching sales order:', orderId);\n      this.orderForm = {\n        sales_order_id: orderId,\n        order_no: 'SO2023001',\n        customer_id: '1',\n        order_date: '2023-01-10',\n        delivery_date: '2023-02-01',\n        order_status: 1,\n        total_amount: 5000,\n        order_remark: '加急订单',\n        items: [\n          { order_item_id: 1, product_id: '1', quantity: 50, unit_price: 100 },\n        ]\n      };\n    },\n    addItem() {\n      this.orderForm.items.push({ product_id: null, quantity: 1, unit_price: 0 });\n    },\n    removeItem(index) {\n      this.orderForm.items.splice(index, 1);\n    },\n    submitForm() {\n      // TODO: Validate and API call\n      this.orderForm.total_amount = parseFloat(this.totalAmountDisplay);\n      console.log('Submitting sales order:', this.orderForm);\n      this.$message.success('订单保存成功!');\n      this.goBack();\n    },\n    goBack() {\n      this.$router.push({ name: 'SalesOrderList' });\n    }\n  },\n  filters: {\n      toFixed(value, count) {\n          if (isNaN(parseFloat(value))) return '0.00';\n          return parseFloat(value).toFixed(count || 2);\n      }\n  }\n};\n</script>\n\n<style scoped>\n.sales-order-form-container {\n  padding: 20px;\n}\n</style> "],"mappings":"AAwEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,UAAA;MACAC,SAAA;QACAC,QAAA;QACAC,WAAA;QACAC,UAAA,MAAAC,IAAA;QACAC,aAAA;QACAC,YAAA;QAAA;QACAC,YAAA;QACAC,YAAA;QACAC,KAAA;MACA;IACA;EACA;EACAC,QAAA;IACAC,mBAAA;MACA,YAAAX,SAAA,CAAAS,KAAA,CAAAG,MAAA,EAAAC,GAAA,EAAAC,IAAA,KAAAD,GAAA,IAAAC,IAAA,CAAAC,QAAA,GAAAD,IAAA,CAAAE,UAAA,WAAAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,MAAAC,OAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;IACA,IAAAH,OAAA,IAAAA,OAAA;MACA,KAAApB,UAAA;MACA,KAAAwB,iBAAA,CAAAJ,OAAA;IACA;MACA,KAAAK,OAAA;IACA;EACA;EACAC,OAAA;IACAF,kBAAAJ,OAAA;MACA;MACAO,OAAA,CAAAC,GAAA,0BAAAR,OAAA;MACA,KAAAnB,SAAA;QACA4B,cAAA,EAAAT,OAAA;QACAlB,QAAA;QACAC,WAAA;QACAC,UAAA;QACAE,aAAA;QACAC,YAAA;QACAC,YAAA;QACAC,YAAA;QACAC,KAAA,GACA;UAAAoB,aAAA;UAAAC,UAAA;UAAAf,QAAA;UAAAC,UAAA;QAAA;MAEA;IACA;IACAQ,QAAA;MACA,KAAAxB,SAAA,CAAAS,KAAA,CAAAsB,IAAA;QAAAD,UAAA;QAAAf,QAAA;QAAAC,UAAA;MAAA;IACA;IACAgB,WAAAC,KAAA;MACA,KAAAjC,SAAA,CAAAS,KAAA,CAAAyB,MAAA,CAAAD,KAAA;IACA;IACAE,WAAA;MACA;MACA,KAAAnC,SAAA,CAAAO,YAAA,GAAA6B,UAAA,MAAAzB,kBAAA;MACAe,OAAA,CAAAC,GAAA,iCAAA3B,SAAA;MACA,KAAAqC,QAAA,CAAAC,OAAA;MACA,KAAAC,MAAA;IACA;IACAA,OAAA;MACA,KAAAC,OAAA,CAAAT,IAAA;QAAAlC,IAAA;MAAA;IACA;EACA;EACA4C,OAAA;IACAxB,QAAAyB,KAAA,EAAAC,KAAA;MACA,IAAAC,KAAA,CAAAR,UAAA,CAAAM,KAAA;MACA,OAAAN,UAAA,CAAAM,KAAA,EAAAzB,OAAA,CAAA0B,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}