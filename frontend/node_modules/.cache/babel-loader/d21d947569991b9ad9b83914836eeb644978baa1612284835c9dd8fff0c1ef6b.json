{"ast":null,"code":"import Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nimport axios from 'axios';\nVue.config.productionTip = false;\n\n// 使用ElementUI\nVue.use(ElementUI);\n\n// 配置axios\naxios.defaults.baseURL = process.env.VUE_APP_API_URL || 'http://localhost:3000/api';\naxios.interceptors.request.use(config => {\n  const token = store.state.token;\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// 响应拦截器处理错误\naxios.interceptors.response.use(response => response, error => {\n  if (error.response) {\n    // 处理401未授权错误\n    if (error.response.status === 401) {\n      store.dispatch('logout');\n      router.push('/login');\n    }\n\n    // 显示错误消息\n    const errorMessage = error.response.data.message || '请求失败';\n    Vue.prototype.$message.error(errorMessage);\n  } else {\n    Vue.prototype.$message.error('网络错误，请检查您的连接');\n  }\n  return Promise.reject(error);\n});\nVue.prototype.$http = axios;\nnew Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount('#app');","map":{"version":3,"names":["Vue","App","router","store","ElementUI","axios","config","productionTip","use","defaults","baseURL","process","env","VUE_APP_API_URL","interceptors","request","token","state","headers","Authorization","response","error","status","dispatch","push","errorMessage","data","message","prototype","$message","Promise","reject","$http","render","h","$mount"],"sources":["/Users/gongqian/Downloads/xianglong-erp/frontend/src/main.js"],"sourcesContent":["import Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\nimport axios from 'axios'\n\nVue.config.productionTip = false\n\n// 使用ElementUI\nVue.use(ElementUI)\n\n// 配置axios\naxios.defaults.baseURL = process.env.VUE_APP_API_URL || 'http://localhost:3000/api'\naxios.interceptors.request.use(config => {\n  const token = store.state.token\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  return config\n})\n\n// 响应拦截器处理错误\naxios.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response) {\n      // 处理401未授权错误\n      if (error.response.status === 401) {\n        store.dispatch('logout')\n        router.push('/login')\n      }\n      \n      // 显示错误消息\n      const errorMessage = error.response.data.message || '请求失败'\n      Vue.prototype.$message.error(errorMessage)\n    } else {\n      Vue.prototype.$message.error('网络错误，请检查您的连接')\n    }\n    return Promise.reject(error)\n  }\n)\n\nVue.prototype.$http = axios\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount('#app')\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,sCAAsC;AAC7C,OAAOC,KAAK,MAAM,OAAO;AAEzBL,GAAG,CAACM,MAAM,CAACC,aAAa,GAAG,KAAK;;AAEhC;AACAP,GAAG,CAACQ,GAAG,CAACJ,SAAS,CAAC;;AAElB;AACAC,KAAK,CAACI,QAAQ,CAACC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe,IAAI,2BAA2B;AACnFR,KAAK,CAACS,YAAY,CAACC,OAAO,CAACP,GAAG,CAACF,MAAM,IAAI;EACvC,MAAMU,KAAK,GAAGb,KAAK,CAACc,KAAK,CAACD,KAAK;EAC/B,IAAIA,KAAK,EAAE;IACTV,MAAM,CAACY,OAAO,CAACC,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOV,MAAM;AACf,CAAC,CAAC;;AAEF;AACAD,KAAK,CAACS,YAAY,CAACM,QAAQ,CAACZ,GAAG,CAC7BY,QAAQ,IAAIA,QAAQ,EACpBC,KAAK,IAAI;EACP,IAAIA,KAAK,CAACD,QAAQ,EAAE;IAClB;IACA,IAAIC,KAAK,CAACD,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;MACjCnB,KAAK,CAACoB,QAAQ,CAAC,QAAQ,CAAC;MACxBrB,MAAM,CAACsB,IAAI,CAAC,QAAQ,CAAC;IACvB;;IAEA;IACA,MAAMC,YAAY,GAAGJ,KAAK,CAACD,QAAQ,CAACM,IAAI,CAACC,OAAO,IAAI,MAAM;IAC1D3B,GAAG,CAAC4B,SAAS,CAACC,QAAQ,CAACR,KAAK,CAACI,YAAY,CAAC;EAC5C,CAAC,MAAM;IACLzB,GAAG,CAAC4B,SAAS,CAACC,QAAQ,CAACR,KAAK,CAAC,cAAc,CAAC;EAC9C;EACA,OAAOS,OAAO,CAACC,MAAM,CAACV,KAAK,CAAC;AAC9B,CACF,CAAC;AAEDrB,GAAG,CAAC4B,SAAS,CAACI,KAAK,GAAG3B,KAAK;AAE3B,IAAIL,GAAG,CAAC;EACNE,MAAM;EACNC,KAAK;EACL8B,MAAM,EAAEC,CAAC,IAAIA,CAAC,CAACjC,GAAG;AACpB,CAAC,CAAC,CAACkC,MAAM,CAAC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}